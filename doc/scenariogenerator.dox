/** \page "Scenario Generator"

!!! Building the gui

See also http://www5.informatik.tu-muenchen.de/scenariogenerator/build.html

First build the Mardyn library, copy it to the directory tools/gui and create the
necessary symbolic links:
Type in the directory src/
\verbatim
make -f ../makefile/Makefile.lib UNIT_TESTS=0 VTK=0 TARGET=RELEASE PARTYPE=SEQ lib
cp libMardyn.so.1.0 ../tools/gui
cd ../tools/gui
ln -s libMardyn.so.1.0 libMardyn.so.1
ln -s libMardyn.so.1.0 libMardyn.so
\endverbatim

I assume that VTK 5, QT4 and QMake are installed on your system.

Extract the ScenarioGenerator sources:
\verbatim
tar xfz ScenarioGenerator.tar.gz
\endverbatim

If the VTK header files are not in your include path, you have to set the variable VTKINCLUDEPATH:
\verbatim
export VTKINCLUDEPATH=/usr/local/include/vtk-5.8/
\endverbatim

Similar for the VTK libraries the variable VTKLIBPATH:
\verbatim
export VTKLIBPATH=/usr/local/lib/vtk-5.8/
\endverbatim


Create the Makefile for the executable (ScenGen) and build the executable.
\verbatim
qmake ScenGen.pro -o Makefile.scengen
make -f Makefile.scengen
\endverbatim

!!! Building the generators

Make sure, that in the files <b> CubicGridGenerator.pro</b> and <b> DropletGenerator.pro</b>
the config variable is set as shown:
\verbatim
CONFIG += dll debug
\endverbatim

\verbatim
qmake CubicGridGenerator.pro -o Makefile.cubic
make -f Makefile.cubic
\endverbatim

\verbatim
qmake DropletGenerator.pro -o Makefile.droplet
make -f Makefile.droplet
\endverbatim

Now, there should be a libs/ directory, where the libraries for the generators have
been placed.

Finally, set the LD_LIBRARY_PATH and run the scenario generator:
\verbatim
export LD_LIBRARY_PATH=.
./ScenGen
\endverbatim


!!! Using the generators for direct input

As file io may be really slow on some architectures, it is possible to use the
generators to generate the input directly in Mardyn/ls1. Therefor, the generators have
to be built as static libraries, which are linked into the Mardyn executable.

Make sure, that in the files <b> CubicGridGenerator.pro</b> and <b> DropletGenerator.pro</b>
the config variable is set as shown:
\verbatim
CONFIG += staticlib debug mardyn
\endverbatim

Then, build the generator libraries. libCubicGridGenerator.a and libDropletGenerator.a
are created and placed in the directory staticlibs.

Now, build the Mardyn executable with the option SUPPORT_GENERATOR in the makefile set:

\verbatim
make -f ../makefile/Makefile PARTYPE=SEQ TARGET=RELEASE SUPPORT_GENERATOR=1 -j3
\endverbatim

Now it is possible to create a setup with the graphical generator. Save that configuration
to a file (Choose "Generator..." -> "save"). That configuration file can be used to initialize
the generator. As it is a plain text file, you can edit it by hand (e.g. increase the number
of molecules by some orders).

The corresponding line in the mardyn configuration file has to look like:
\verbatim
phasespacefile Generator droplet config.txt
\endverbatim
or
\verbatim
phasespacefile Generator cubic config.txt
\endverbatim

<B> Note that only the content of the phasespace file will be generated, i.e. all
other settings e.g. cutoff-radius, parallelization and so on are read from the mardyn config file! </B>

*/