
/** \page "Writing Unit Tests"

!!! Organisation of the tests

All tests are organized in directories called \b tests. A test-directory contains
the tests for the code contained in its parent directory. It should be possible
to derive the name of the source file under test from the classname of the testcase.

!!! Writing unit tests

Here I explain the testcase tests/CommonTest as a simple example, to demonstrate
how to write testcases within Mardyn.

<b>Note: Although cppunit is the testing framework used at the moment, DO NOT USE
ANY CPPUNIT-FUNCTIONALITY DIRECTLY!!!

In order to keep the underlying testing framework exchangable, all framework-dependend
things should be encapsulated.</b>

!! Writing the header

To create a new testcase, apply the following steps to your new header file:
- Create a new testclass, which inherits from utils::Test
- Include the header \"utils/Testing.h\"
- Write the declarations of the test methods. It is recommended that you create
  one test method for each method which you are going to test. The name
  of test methods should start with \"test"\. Thus, you end up with the following
  code:

  \code
#include "utils/Testing.h"

class CommonTest : public utils::Test {

public:
	CommonTest();

	virtual ~CommonTest();

	void testGetTimeString();

	void testAlignedNumber();
};
\endcode

- Next declare the test suite, which will contain the single test methods. A good
  place is just at then beginning of the class. A test suite is declared with
  the macros TEST_SUITE(test_suite_name) and TEST_SUITE_END().
  Declare the unit tests in between those two macros with the macro
  TEST_METHOD(testGetTimeString).

  \note The argument of TEST_METHOD must match the name of a test function
        you declared in the last step!
  \note Each of the macros has to be terminated by a semicolon!

  The result is the final header:

\code
#include <utils/Testing.h>

class CommonTest : public utils::Test {

	// declare testsuite commonTest
	TEST_SUITE(CommonTest);

	// add two methods which perform tests
	TEST_METHOD(testGetTimeString);
	TEST_METHOD(testAlignedNumber);

	// end suite declaration
	TEST_SUITE_END();


public:
	CommonTest();

	virtual ~CommonTest();

	void testGetTimeString();

	void testAlignedNumber();
};
\endcode

!! Writing the implementation file

- Next implement the .cpp-file. Include the header of the test class as well as
  the header of the class being tested.

- <b>Directly below the includes, call the macro \"TEST_SUITE_REGISTRATION(test name)\",
with the name of the test class as argument! </b>

\code
#include "CommonTest.h"
#include "Common.h"

TEST_SUITE_REGISTRATION(CommonTest);
\endcode

- Then implement the test functions. Use assertions to check results. Assertions
are
	- ASSERT_TRUE
	- ASSERT_TRUE_MSG
	- ASSERT_FAIL
	- ASSERT_EQUAL
	- ASSERT_EQUAL_MSG
	- ASSERT_DOUBLES_EQUAL
	- ASSERT_DOUBLES_EQUAL_MSG

@see utils/Testing.h

The implementation of a test method may look like
\code
void CommonTest::testGetTimeString() {
	std::string time = gettimestring();
	ASSERT_EQUAL((size_t)13, time.size());
	ASSERT_EQUAL(time[6], 'T');
}
\endcode

!!! A few general thoughts about tests

- Think about testability, when you write code.
  Try to keep your methods small and simple. If your method is just too long or
  contains complex control flows, then your tests might get very complex as well.
  Thus, try to design your code for testability.

- You might also try to test invalid input to your methods. E.g. if you specify
  that your method accepts only positive integer input values, try also negative
  ones and check if your code deals with that case the right way.

- Of course tests will never cover 100 % of your code, and there will be bugs
  despite. For each bug you fixed, add a test. This will make sure that the bug
  will never again be introduced (e.g. by a developer who is not familiar with
  that part of the code).

- Don't overdo tests - create a few tests per public method. Add only more tests,
  if certain parts of your code are likely to contain several bugs, or if code
  is rather complex.

For more detailed information on testing see
- the "CppUnit Cookbook" (<b>Although you must not use anything cppunit-related directly!</b>
- JUnit - Pragmatic Programmer: Although written for JUnit, the general concept of tests is
  explained very well
- XUnit Test Patterns

*/
