<?xml version='1.0' encoding='UTF-8'?>
<mardyn version="20100525" >
  <refunits type="SI" >
<!-- standard units - should be  used for internal reduction one day, but default for all values in simulation remain "reduced" -->
    <length unit="nm">0.35</length>	<!-- default: nm - also m,pm,fm or Angstroem may be used in the future? -->
    <mass unit="g">1.0959555966678e-22</mass> <!-- also atomistic mass unit Dalton "u" in the future? -->
    <energy unit="K">100.0</energy> <!-- again: offer other units -->
  </refunits>

  <!-- simulation options -->
  <simulation type="MD" >
    <run>
      <currenttime>0</currenttime>
      <production>
        <steps>100000</steps>
      </production>
      <equilibration>
        <steps>20000</steps>
      </equilibration>
    </run>

    <integrator type="Leapfrog" >
      <!-- MD ODE integrator -->
      <timestep unit="reduced" >0.01</timestep>
    </integrator>
    <ensemble type="NVT">
      <!--Ensemble is the main topic of the simulation -->
      <Nparticles>40000</Nparticles>
      <temperature unit="reduced" >0.7</temperature>	<!-- in future also units="K" -->
      <domain type="box">
          <lx unit="reduced">97.</lx>
          <ly unit="reduced">97.</ly>
          <lz unit="reduced">97.</lz>
      </domain>
      <!-- instead of lx/ly/lz we might accept density -->
      <components>
          <moleculetype id="1" >
            <coord_base>principal_axes</coord_base>
            <site type="LJ126" id="1" >
              <coords> <x>0.0</x> <y>0.0</y> <z>0.0</z> </coords>
              <mass>12.00</mass>
              <sigma>2.900109</sigma>
              <epsilon>11.692625</epsilon>
            </site>
            <site type="Charge" id="2" >
              <coords> <x>0.0</x> <y>0.0</y> <z>-1.212237</z> </coords>
              <mass>16.00</mass>
              <charge>-1.0</charge>
            </site>
            <site type="Dipole" id="3" >
              <coords> <x>0.0</x> <y>0.0</y> <z>1.212237</z> </coords>
              <dipolemoment>
                <!-- absolute value of the dipole moment -->
                <abs>7.34</abs>
                <!-- unit vector corrdinates specifying the orietation of the dipole -->
                <x>1.0</x> <y>0.0</y> <z>0.0</z>
              </dipolemoment>
            </site>
            <site type="Quadrupole" id="4" >
              <coords> <x>0.0</x> <y>0.0</y> <z>0.0</z> </coords>
              <quadrupolemoment>
                <!-- absolute value of the quadrupole moment -->
                <abs>3.76</abs>
                <!-- unit vector corrdinates specifying the orietation of the quadrupole -->
                <x>1.0</x> <y>0.0</y> <z>0.0</z>
              </quadrupolemoment>
            </site>
            <site type="Tersoff" id="5" >
              <coords> <x>0.0</x> <y>0.0</y> <z>-1.212237</z> </coords>
              <A></A>
              <B></B>
              <lambda></lambda>
              <mu></mu>
              <R></R>
              <S></S>
              <c></c>
              <d></d>
              <h></h>
              <beta></beta>
            </site>
            <momentsofinertia>
              <Ixx>47.02459341</Ixx>
              <Iyy>47.02459341</Iyy>
              <Izz>47.02459341</Iyy>
            </momentsofinertia>
          </moleculetype>
          
          <mixing>
            <rule type="LB" cid1="1" cid2="2">
              <eta>1.0</eta>
              <xi>1.023</xi>
            </rule>
          </mixing>
      </components>

      <!-- Definition of the Phasespacepoint
           can be read from file or generated by the MarDyn internally
      -->
      <phasespacepoint>
        <!-- Read in old ASCII phase spcae file (skipping old phase space header information) -->
        <file type="ASCII" >test.inp</file>


        <!-- options for internal mkesfera generator -->
        <generator src="internal" id="mkesfera" >
          <droplet>
            <center> <x>0.0</x> <y>0.0</y> <z>0.0</z> </center>
            <radius>25</radius>
            <density>0.6</density>
          </droplet>
          <outer-density>0.06</outer-density>
        </generator>

        <!-- options for internal mkTcTS generator -->
        <generator name="mkTcTS">
          <layer1>
            <density>0.06482</density>
          </layer1>
          <layer2>
            <density>0.6223</density>
          </layer2>
        </generator>

        <!-- options for internal grid generator -->
        <generator src="internal" id="GridGenerator" >
          <lattice type="cubic" centering="face">
            <!-- automatically determined if density and num particles is given -->
			<vec id="a"> <x>1.0</x> <y>0.0</y> <z>0.0</z> </vec>
			<vec id="b"> <x>0.0</x> <y>1.0</y> <z>0.0</z> </vec>
			<vec id="c"> <x>0.0</x> <y>0.0</y> <z>1.0</z> </vec>
            <dims a="2" b="2" c="2" />
          </lattice>
          <basis>
            <site>
              <componentid>1</componentid>
              <coordinate x="0.0" y="0.0" z="0.0" />
            </site>
          </basis>
          <origin> <x>0.0</x> <y>0.0</y> <z>0.0</z> </origin>
        </generator>

      </phasespacepoint>
    </ensemble>

    <!-- algorithm specific configuration options -->
    <algorithm>
      <parallelisation type="DomainDecomposition"></parallelisation>
      <datastructure type="LinkedCells">
          <cellsInCutoffRadius>2</cellsInCutoffRadius>
      </datastructure>
      
      <!-- cutoff definitions -->
      <cutoffs type="CenterOfMass" >
        <!-- Lennard Jones cutoff radius -->
        <radiusLJ unit="reduced" >5.0</radiusLJ>
        <!-- Tersoff cutoff radius -->
        <radiusTersoff>1.0</radiusTersoff>
      </cutoffs>

      <electrostatic type="ReactionField" >
        <epsilon>1.0e+10</epsilon>
      </electrostatic>

      <!-- velocity scaling thermostat, if no component is specified the global thermostat is assumed -->
      <thermostat type="VelocityScaling" component="1">
        <!-- target temperature, if not specified the ensemble temperature will be used -->
        <temperature>0.7</temperature>
      </thermostat>
    </algorithm>

    <!-- output plugins
	There are several output plugins which can be used to generate some output files while running simulations.
	The following comments describe the provided output plugins. -->
	
	<!-- general information about properties of the output plugins:
    The attribute “name“ holds the name of the plugin user want to use performing an output. The names of the provided plugins are listed below:
      - CheckpointWriter
      - ResultWriter
      - XyzWriter
      - VISWriter
	  - MmspdWriter
      - PovWriter	  
      - StatisticsWriter
      - DecompWriter
    The element “writefrequency” contains a integer value which controls the frequency of writing out the data. For example the value “10” makes
	sure that every 10th timestep data will be written out.
    The element “outputprefix” holds a string which defines the prefix of the output filename. For example the string “default” will result
	in a output file named “default.res”. -->
	<output>
	
	  <!-- CheckpointWriter plugin 
	  This writer will create a restart file which format or structure is the same as used by input files *.inp.
	  These files can be used to continue a simulation. -->
	  <outputplugin name="CheckpointWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

	  <!-- LJ flop counter plugin
	  This writer outputs the actual FLOPS rate of the LJ calculations. -->
	  <outputplugin name="LJFLOPCounter">
        <!-- TODO: make the LJ flop counter a real output plugin
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
        -->
      </outputplugin>
    
      <!-- ResultWriter plugin 
	  Writes thermodynamic properties to a file. The following values will be written to a file:
        - Simulation time step
        - time since the simulation started
        - Average potential Energy
        - Pressure
        - BetaTrans
        - BetaRot
        - Specific heat capacity (constant volume) -->
      <outputplugin name="Resultwriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
        <accumulation_steps>1000</accumulation_steps>
      </outputplugin>

      <!-- RDF plugin
      This module writes out Radial Distribution Function data -->
      <outputplugin name="RDF">
        <writefrequency>100</writefrequency>
        <outputprefix>default</outputprefix>
        <bins>1000</bins>
        <intervallength>0.003</intervallength>
      </outputplugin>
	  
	  <!-- visualization output plugins
	  These writers are used to generate files which can be used for visualization purpose by different visualization software.
	  Depending on the specific software different file formats are supported. -->
	  
	  <!-- XyzWriter plugin
	  The *.xyz-format contains x, y, z coordinates of the molecules. Such a file can be read by visualization software like vmd
	  (for detail information visit: http://www.ks.uiuc.edu/Research/vmd/). -->
	  <outputplugin name="XyzWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>
	  
	  <!-- VISWriter plugin
	  Additional to the coordinates of the molecules, the *.vis-format also contains the orientation information
	  of the molecules (using quaternions). The files can be read by software like:
	    - MolCloud (visit: http://www.visus.uni-stuttgart.de/index.php?id=995)
		- Megamol  (visit: https://svn.vis.uni-stuttgart.de/trac/megamol/) -->
	  <outputplugin name="VISWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>
	  
	  <!-- MmspdWriter plugin
      The *.mmspd-format contains the coordinates of the molecules and information about the dimensions of the simulation box.
	  The file can be read by the software MegaMol (for detail information visit: https://svn.vis.uni-stuttgart.de/trac/megamol/). -->
	  <outputplugin name="MmspdWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

	  <!-- PovWriter
      This writer creates a file containing the current state of simulation in *.pov-format. It can be used to visualize with
	  POVray software (for detail information visit: www.povray.org). -->
	  <outputplugin name="PovWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

      <!-- more output plugins -->
	  
	  <!-- StatisticsWriter
      This writer writes plot statistics to a file. At the moment, only a histogramm showing the occupancy of the cells is produced.
        - x: number of Molecules
        - y: number of cells with the respective number of molecules -->
	  <outputplugin name="StatisticsWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

	  <!-- DecompWriter
	  This writer writes out information about the decomposition of the simulation domain. -->
	  <outputplugin name="DecompWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>
	  
    </output>
  </simulation>
</mardyn>
