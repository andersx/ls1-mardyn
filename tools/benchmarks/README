benchmark tool
(written in Python by Martin Bernreuther <bernreuther@hlrs.de>)

scope:	generate (and execute) jobs to perform benchmarks and to postprocess results

Prerequisite:
-------------
- config file
- template job directory (for each job will be copied with unique name to the destination directory and changed)
- optional template postprocessing directory (contents will be copied to destination directory once and changed)

start "genjobs.py" ("genjobs.py -h" will show some help; if no configure file is given, "config" is used)
to generate the benchmarks and submit them


Typical directory structure:
----------------------------
[root]
configfile
+[gentemplate]
 files&links
+[pptemplate]
 files&links
+[dstroot]
 cp_of_pptemplate_files
 [cp_of_gentemplate]


Structure of configure file:
----------------------------
[general]
root:	root directory
dstroot:	destination root directory, where the job directories will be stored
delimiter:	character (or string) to seperate list entries in variables

[generator]
template:	job template directory to be copied to dstroot
parafiles:	files within the job directory to substitute parameters
command:	command to be executed for each job
condition:	a condition, which will be checked for each parameter combination as a prerequisite to generate a job
break:	condition to stop job generation

[parameters]
# Parameters to variate

[postproc]
template:	postprocessing template directory; contents will be copied to dstroot
parafiles:	postprocessing files to substitute parameters
command:	command to be executed at the end


Parameters:
-----------
...are defined in the parameters section of the config file like
<name>:	<definition>
The <name> is case sensitive and there mustn't be any parameter names,
which are prefixes of others, like "name" and "name1". In this case
the simple replace operation might change $name1 during the replacement
of $name to <name_replacement>1. It is also advisable to avoid the
$DELIMITER char within the parameter names.
The <definition> contains a whitespace separated list of strings
for parameters to vary, like
name1:	A BC DEF
name2:	1 10 100
A single value indicates a parameter, which will just be substituted, like
name3:	1.23
If such a string starts with a '=' (equal sign) the following formula
will be evaluated first, like
name4:	=$name2*$name3
However, up to now, no action will be taken to take care of the
evaluation order.
name5:	=$name6
name6:	=$name4
might give unwanted results, if $name5 is evaluted before $name6.
So don't use recursion with parameters containing a formula!


Additional variables:
---------------------

$DSTROOTNAME	dstroot
$DSTROOTPATH	dstroot, absolute path
$DELIMITER	list delimiter
$GENTEMPLATENAME	job template
$GENTEMPLATEPATH	job template, absolute path
$PPTEMPLATENAME	postprocessing template
$PPTEMPLATEPATH	postprocessing template, absolute path
$LOGFILENAME	logfile
$LOGFILENAME	logfile, absolute path

within the generator part for each job:
$JOBNAME	job name
$JOBDIR	job directory
$JOBDIRPATH	job directory, absolute path
$COMMANDSTATUS	return value of command

within the preprocessing part after job generation
$CREATEDJOBS	list of jobnames
$GENCMDOUTPUT	list of the generator commands output

