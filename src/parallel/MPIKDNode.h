#ifndef MPIKDNODE_H_
#define MPIKDNODE_H_

#include <mpi.h>

#include <bitset>
#include <sstream>
#include <string>

/**
 * @author This class was autogenerated by DaStGen
 * 		   DataStructureGenerator (DaStGen), 2007-2009,
 * 		   by Wolfgang Eckhardt
 *
 * 		   build date: 06-12-2011 16:21
 *
 * @date   29/02/2012 00:29
 */
class MPIKDNodePacked {

private:
	int _lowCorner[3];
	int _highCorner[3];
	int _nodeID;
	int _owningProc;
	int _firstChildID;
	int _secondChildID;
	int _nextSendingProcess;
	double _load;
	double _OptimalLoadPerProcess;
	double _expectedDeviation;
	double _deviation;
	int _level;

	/** mapping of records:
      || Member 	|| startbit 	|| length
       |  coversWholeDomain	| startbit 0	| #bits 3
       |  numProcs	| startbit 3	| #bits 28
	 */
	int _packedRecords0;


public:

	MPIKDNodePacked() {}

	/**
	 * Generated
	 */
	MPIKDNodePacked(const std::bitset<3>& coversWholeDomain, const int& numProcs,
			const int* lowCorner, const int* highCorner, const int& nodeID, const int& owningProc,
			const int& firstChildID, const int& secondChildID, const int& nextSendingProcess,
			const double& load, const double& OptimalLoadPerProcess, const double& expectedDeviation,
			const double& deviation, const int& level);

	/**
	 * Generated
	 */
	virtual ~MPIKDNodePacked();

	/**
	 * Generated
	 */
	std::bitset<3> getCoversWholeDomain() const;

	/**
	 * Generated
	 */
	void setCoversWholeDomain(const std::bitset<3>& coversWholeDomain);

	/**
	 * Generated
	 */
	bool getCoversWholeDomain(int elementIndex) const;

	/**
	 * Generated
	 */
	void setCoversWholeDomain(int elementIndex, const bool& coversWholeDomain);

	/**
	 * Generated
	 */
	void flipCoversWholeDomain(int elementIndex);

	/**
	 * Generated
	 */
	int getNumProcs() const;

	/**
	 * Generated
	 */
	void setNumProcs(const int& numProcs);

	/**
	 * Generated
	 */
	const int* getLowCorner() const;

	/**
	 * Generated
	 */
	int getLowCorner(int elementIndex) const;

	/**
	 * Generated
	 */
	void setLowCorner(int elementIndex, const int& lowCorner);

	/**
	 * Generated
	 */
	const int* getHighCorner() const;

	/**
	 * Generated
	 */
	int getHighCorner(int elementIndex) const;

	/**
	 * Generated
	 */
	void setHighCorner(int elementIndex, const int& highCorner);

	/**
	 * Generated
	 */
	int getNodeID() const;

	/**
	 * Generated
	 */
	void setNodeID(const int& nodeID);

	/**
	 * Generated
	 */
	int getOwningProc() const;

	/**
	 * Generated
	 */
	void setOwningProc(const int& owningProc);

	/**
	 * Generated
	 */
	int getFirstChildID() const;

	/**
	 * Generated
	 */
	void setFirstChildID(const int& firstChildID);

	/**
	 * Generated
	 */
	int getSecondChildID() const;

	/**
	 * Generated
	 */
	void setSecondChildID(const int& secondChildID);

	/**
	 * Generated
	 */
	int getNextSendingProcess() const;

	/**
	 * Generated
	 */
	void setNextSendingProcess(const int& nextSendingProcess);

	/**
	 * Generated
	 */
	double getLoad() const;

	/**
	 * Generated
	 */
	void setLoad(const double& load);

	/**
	 * Generated
	 */
	double getOptimalLoadPerProcess() const;

	/**
	 * Generated
	 */
	void setOptimalLoadPerProcess(const double& OptimalLoadPerProcess);

	double getExpectedDeviation() const;

	double getDeviation() const;

	int getLevel() const;

	/**
	 * Generated
	 */
	std::string toString() const;

	/**
	 * Generated
	 */
	void toString(std::ostream& out) const;


	/**
	 * Global that represents the mpi datatype.
	 * There are two variants: Datatype identifies only those attributes marked with
	 * parallelise. FullDatatype instead identifies the whole record with all fields.
	 */
	static MPI_Datatype Datatype;

	/**
	 * Initializes the data type for the mpi operations. Has to be called
	 * before the very first send or receive operation is called.
	 */
	static void initDatatype();

	static void shutdownDatatype();

};

#endif /* MPIKDNODE_H_ */

