/*
 * VTKGridWriterImplementation.h
 *
 * @Date: 20.09.2010
 * @Author: eckhardw
 */

#ifndef VTKGRIDWRITERIMPLEMENTATION_H_
#define VTKGRIDWRITERIMPLEMENTATION_H_

#include <string>
#include <vector>

class VTKGridCell;
class VTKFile_t;

/**
 * This class contains the actual functionality for writing a mesh as
 * vtk unstructured grid data. The mesh is written cell wise.
 *
 * It acts as an adapter to the serialization classes generated by codesynthesis xsd.
 */
class VTKGridWriterImplementation {

private:

	//! object representing the sequential vkt-file
	VTKFile_t* _vtkFile;

	//! object representing the parallel vkt-file
	VTKFile_t* _parallelVTKFile;

	//! Counts the number of cells plotted.
	unsigned int _numCellsPlotted;

	//! Counts the number of vertices plotted.
	unsigned int _numVerticesPlotted;

	//! the rank of the process
	int _rank;


public:

	/**
	 * @param rank the MPI rank of the process
	 */
	VTKGridWriterImplementation(int rank);

	virtual ~VTKGridWriterImplementation();

	void initializeVTKFile();

	/**
	 * Plot a cell.
	 *
	 * @param cell the cell to plot
	 */
	void plotCell(VTKGridCell& molecule);

	void writeVTKFile(const std::string& fileName);

	/**
	 * Initialize the data structures to write a parallel vtk file (i.e. a meta
	 * file describing the data and structure of the file a single node creates).
	 *
	 * @param fileNames the names of the sequential files which are to be referenced
	 */
	void initializeParallelVTKFile(const std::vector<std::string>& fileNames);


	/**
	 * Write the xml-tree to a file on disc.
	 *
	 * @param fileName the name of the file written
	 */
	void writeParallelVTKFile(const std::string& fileName);

	bool isVTKFileInitialized();

	bool isParallelVTKFileInitialized();

	unsigned int getNumCellsPlotted();

	unsigned int getNumVerticesPlotted();
};

#endif /* VTKGRIDWRITERIMPLEMENTATION_H_ */
