// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "io/vtk/vtk-punstructured.h"

// PUnstructuredGrid_t
// 

const PUnstructuredGrid_t::PPointData_type& PUnstructuredGrid_t::
PPointData () const
{
  return this->PPointData_.get ();
}

PUnstructuredGrid_t::PPointData_type& PUnstructuredGrid_t::
PPointData ()
{
  return this->PPointData_.get ();
}

void PUnstructuredGrid_t::
PPointData (const PPointData_type& x)
{
  this->PPointData_.set (x);
}

void PUnstructuredGrid_t::
PPointData (::std::auto_ptr< PPointData_type > x)
{
  this->PPointData_.set (x);
}

const PUnstructuredGrid_t::PCellData_type& PUnstructuredGrid_t::
PCellData () const
{
  return this->PCellData_.get ();
}

PUnstructuredGrid_t::PCellData_type& PUnstructuredGrid_t::
PCellData ()
{
  return this->PCellData_.get ();
}

void PUnstructuredGrid_t::
PCellData (const PCellData_type& x)
{
  this->PCellData_.set (x);
}

void PUnstructuredGrid_t::
PCellData (::std::auto_ptr< PCellData_type > x)
{
  this->PCellData_.set (x);
}

const PUnstructuredGrid_t::PPoints_type& PUnstructuredGrid_t::
PPoints () const
{
  return this->PPoints_.get ();
}

PUnstructuredGrid_t::PPoints_type& PUnstructuredGrid_t::
PPoints ()
{
  return this->PPoints_.get ();
}

void PUnstructuredGrid_t::
PPoints (const PPoints_type& x)
{
  this->PPoints_.set (x);
}

void PUnstructuredGrid_t::
PPoints (::std::auto_ptr< PPoints_type > x)
{
  this->PPoints_.set (x);
}

const PUnstructuredGrid_t::PCells_type& PUnstructuredGrid_t::
PCells () const
{
  return this->PCells_.get ();
}

PUnstructuredGrid_t::PCells_type& PUnstructuredGrid_t::
PCells ()
{
  return this->PCells_.get ();
}

void PUnstructuredGrid_t::
PCells (const PCells_type& x)
{
  this->PCells_.set (x);
}

void PUnstructuredGrid_t::
PCells (::std::auto_ptr< PCells_type > x)
{
  this->PCells_.set (x);
}

const PUnstructuredGrid_t::Piece_sequence& PUnstructuredGrid_t::
Piece () const
{
  return this->Piece_;
}

PUnstructuredGrid_t::Piece_sequence& PUnstructuredGrid_t::
Piece ()
{
  return this->Piece_;
}

void PUnstructuredGrid_t::
Piece (const Piece_sequence& s)
{
  this->Piece_ = s;
}

const PUnstructuredGrid_t::GhostLevel_type& PUnstructuredGrid_t::
GhostLevel () const
{
  return this->GhostLevel_.get ();
}

PUnstructuredGrid_t::GhostLevel_type PUnstructuredGrid_t::
GhostLevel_default_value ()
{
  return GhostLevel_type (0LL);
}


// VTKFile_t
// 

const VTKFile_t::PUnstructuredGrid_optional& VTKFile_t::
PUnstructuredGrid () const
{
  return this->PUnstructuredGrid_;
}

VTKFile_t::PUnstructuredGrid_optional& VTKFile_t::
PUnstructuredGrid ()
{
  return this->PUnstructuredGrid_;
}

void VTKFile_t::
PUnstructuredGrid (const PUnstructuredGrid_type& x)
{
  this->PUnstructuredGrid_.set (x);
}

void VTKFile_t::
PUnstructuredGrid (const PUnstructuredGrid_optional& x)
{
  this->PUnstructuredGrid_ = x;
}

void VTKFile_t::
PUnstructuredGrid (::std::auto_ptr< PUnstructuredGrid_type > x)
{
  this->PUnstructuredGrid_.set (x);
}

const VTKFile_t::UnstructuredGrid_optional& VTKFile_t::
UnstructuredGrid () const
{
  return this->UnstructuredGrid_;
}

VTKFile_t::UnstructuredGrid_optional& VTKFile_t::
UnstructuredGrid ()
{
  return this->UnstructuredGrid_;
}

void VTKFile_t::
UnstructuredGrid (const UnstructuredGrid_type& x)
{
  this->UnstructuredGrid_.set (x);
}

void VTKFile_t::
UnstructuredGrid (const UnstructuredGrid_optional& x)
{
  this->UnstructuredGrid_ = x;
}

void VTKFile_t::
UnstructuredGrid (::std::auto_ptr< UnstructuredGrid_type > x)
{
  this->UnstructuredGrid_.set (x);
}

const VTKFile_t::type_type& VTKFile_t::
type () const
{
  return this->type_.get ();
}

VTKFile_t::type_type& VTKFile_t::
type ()
{
  return this->type_.get ();
}

void VTKFile_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void VTKFile_t::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const VTKFile_t::version_type& VTKFile_t::
version () const
{
  return this->version_.get ();
}

const VTKFile_t::version_type& VTKFile_t::
version_default_value ()
{
  return version_default_value_;
}

const VTKFile_t::byte_order_type& VTKFile_t::
byte_order () const
{
  return this->byte_order_.get ();
}

const VTKFile_t::byte_order_type& VTKFile_t::
byte_order_default_value ()
{
  return byte_order_default_value_;
}


// PPointData
// 

const PPointData::PDataArray_sequence& PPointData::
PDataArray () const
{
  return this->PDataArray_;
}

PPointData::PDataArray_sequence& PPointData::
PDataArray ()
{
  return this->PDataArray_;
}

void PPointData::
PDataArray (const PDataArray_sequence& s)
{
  this->PDataArray_ = s;
}


// PCellData
// 

const PCellData::PDataArray_sequence& PCellData::
PDataArray () const
{
  return this->PDataArray_;
}

PCellData::PDataArray_sequence& PCellData::
PDataArray ()
{
  return this->PDataArray_;
}

void PCellData::
PDataArray (const PDataArray_sequence& s)
{
  this->PDataArray_ = s;
}


// PPoints
// 

const PPoints::PDataArray_sequence& PPoints::
PDataArray () const
{
  return this->PDataArray_;
}

PPoints::PDataArray_sequence& PPoints::
PDataArray ()
{
  return this->PDataArray_;
}

void PPoints::
PDataArray (const PDataArray_sequence& s)
{
  this->PDataArray_ = s;
}


// PCells
// 

const PCells::PDataArray_sequence& PCells::
PDataArray () const
{
  return this->PDataArray_;
}

PCells::PDataArray_sequence& PCells::
PDataArray ()
{
  return this->PDataArray_;
}

void PCells::
PDataArray (const PDataArray_sequence& s)
{
  this->PDataArray_ = s;
}


// Piece
// 

const Piece::Source_type& Piece::
Source () const
{
  return this->Source_.get ();
}

Piece::Source_type& Piece::
Source ()
{
  return this->Source_.get ();
}

void Piece::
Source (const Source_type& x)
{
  this->Source_.set (x);
}

void Piece::
Source (::std::auto_ptr< Source_type > x)
{
  this->Source_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// PUnstructuredGrid_t
//

PUnstructuredGrid_t::
PUnstructuredGrid_t (const PPointData_type& PPointData,
                     const PCellData_type& PCellData,
                     const PPoints_type& PPoints,
                     const PCells_type& PCells)
: ::xml_schema::type (),
  PPointData_ (PPointData, ::xml_schema::flags (), this),
  PCellData_ (PCellData, ::xml_schema::flags (), this),
  PPoints_ (PPoints, ::xml_schema::flags (), this),
  PCells_ (PCells, ::xml_schema::flags (), this),
  Piece_ (::xml_schema::flags (), this),
  GhostLevel_ (GhostLevel_default_value (), ::xml_schema::flags (), this)
{
}

PUnstructuredGrid_t::
PUnstructuredGrid_t (::std::auto_ptr< PPointData_type >& PPointData,
                     ::std::auto_ptr< PCellData_type >& PCellData,
                     ::std::auto_ptr< PPoints_type >& PPoints,
                     ::std::auto_ptr< PCells_type >& PCells)
: ::xml_schema::type (),
  PPointData_ (PPointData, ::xml_schema::flags (), this),
  PCellData_ (PCellData, ::xml_schema::flags (), this),
  PPoints_ (PPoints, ::xml_schema::flags (), this),
  PCells_ (PCells, ::xml_schema::flags (), this),
  Piece_ (::xml_schema::flags (), this),
  GhostLevel_ (GhostLevel_default_value (), ::xml_schema::flags (), this)
{
}

PUnstructuredGrid_t::
PUnstructuredGrid_t (const PUnstructuredGrid_t& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PPointData_ (x.PPointData_, f, this),
  PCellData_ (x.PCellData_, f, this),
  PPoints_ (x.PPoints_, f, this),
  PCells_ (x.PCells_, f, this),
  Piece_ (x.Piece_, f, this),
  GhostLevel_ (x.GhostLevel_, f, this)
{
}

PUnstructuredGrid_t::
PUnstructuredGrid_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PPointData_ (f, this),
  PCellData_ (f, this),
  PPoints_ (f, this),
  PCells_ (f, this),
  Piece_ (f, this),
  GhostLevel_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void PUnstructuredGrid_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PPointData
    //
    if (n.name () == "PPointData" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PPointData_type > r (
        PPointData_traits::create (i, f, this));

      if (!PPointData_.present ())
      {
        this->PPointData_.set (r);
        continue;
      }
    }

    // PCellData
    //
    if (n.name () == "PCellData" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PCellData_type > r (
        PCellData_traits::create (i, f, this));

      if (!PCellData_.present ())
      {
        this->PCellData_.set (r);
        continue;
      }
    }

    // PPoints
    //
    if (n.name () == "PPoints" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PPoints_type > r (
        PPoints_traits::create (i, f, this));

      if (!PPoints_.present ())
      {
        this->PPoints_.set (r);
        continue;
      }
    }

    // PCells
    //
    if (n.name () == "PCells" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PCells_type > r (
        PCells_traits::create (i, f, this));

      if (!PCells_.present ())
      {
        this->PCells_.set (r);
        continue;
      }
    }

    // Piece
    //
    if (n.name () == "Piece" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Piece_type > r (
        Piece_traits::create (i, f, this));

      this->Piece_.push_back (r);
      continue;
    }

    break;
  }

  if (!PPointData_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "PPointData",
      "");
  }

  if (!PCellData_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "PCellData",
      "");
  }

  if (!PPoints_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "PPoints",
      "");
  }

  if (!PCells_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "PCells",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "GhostLevel" && n.namespace_ ().empty ())
    {
      this->GhostLevel_.set (GhostLevel_traits::create (i, f, this));
      continue;
    }
  }

  if (!GhostLevel_.present ())
  {
    this->GhostLevel_.set (GhostLevel_default_value ());
  }
}

PUnstructuredGrid_t* PUnstructuredGrid_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PUnstructuredGrid_t (*this, f, c);
}

PUnstructuredGrid_t::
~PUnstructuredGrid_t ()
{
}

// VTKFile_t
//

const VTKFile_t::version_type VTKFile_t::version_default_value_ (
  "0.1");

const VTKFile_t::byte_order_type VTKFile_t::byte_order_default_value_ (
  "LittleEndian");

VTKFile_t::
VTKFile_t (const type_type& type)
: ::xml_schema::type (),
  PUnstructuredGrid_ (::xml_schema::flags (), this),
  UnstructuredGrid_ (::xml_schema::flags (), this),
  type_ (type, ::xml_schema::flags (), this),
  version_ (version_default_value (), ::xml_schema::flags (), this),
  byte_order_ (byte_order_default_value (), ::xml_schema::flags (), this)
{
}

VTKFile_t::
VTKFile_t (const VTKFile_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PUnstructuredGrid_ (x.PUnstructuredGrid_, f, this),
  UnstructuredGrid_ (x.UnstructuredGrid_, f, this),
  type_ (x.type_, f, this),
  version_ (x.version_, f, this),
  byte_order_ (x.byte_order_, f, this)
{
}

VTKFile_t::
VTKFile_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PUnstructuredGrid_ (f, this),
  UnstructuredGrid_ (f, this),
  type_ (f, this),
  version_ (f, this),
  byte_order_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void VTKFile_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PUnstructuredGrid
    //
    if (n.name () == "PUnstructuredGrid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PUnstructuredGrid_type > r (
        PUnstructuredGrid_traits::create (i, f, this));

      if (!this->PUnstructuredGrid_)
      {
        this->PUnstructuredGrid_.set (r);
        continue;
      }
    }

    // UnstructuredGrid
    //
    if (n.name () == "UnstructuredGrid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< UnstructuredGrid_type > r (
        UnstructuredGrid_traits::create (i, f, this));

      if (!this->UnstructuredGrid_)
      {
        this->UnstructuredGrid_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      this->type_.set (r);
      continue;
    }

    if (n.name () == "version" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< version_type > r (
        version_traits::create (i, f, this));

      this->version_.set (r);
      continue;
    }

    if (n.name () == "byte_order" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< byte_order_type > r (
        byte_order_traits::create (i, f, this));

      this->byte_order_.set (r);
      continue;
    }
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "type",
      "");
  }

  if (!version_.present ())
  {
    this->version_.set (version_default_value ());
  }

  if (!byte_order_.present ())
  {
    this->byte_order_.set (byte_order_default_value ());
  }
}

VTKFile_t* VTKFile_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class VTKFile_t (*this, f, c);
}

VTKFile_t::
~VTKFile_t ()
{
}

// PPointData
//

PPointData::
PPointData ()
: ::xml_schema::type (),
  PDataArray_ (::xml_schema::flags (), this)
{
}

PPointData::
PPointData (const PPointData& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PDataArray_ (x.PDataArray_, f, this)
{
}

PPointData::
PPointData (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PDataArray_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void PPointData::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PDataArray
    //
    if (n.name () == "PDataArray" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PDataArray_type > r (
        PDataArray_traits::create (i, f, this));

      this->PDataArray_.push_back (r);
      continue;
    }

    break;
  }
}

PPointData* PPointData::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PPointData (*this, f, c);
}

PPointData::
~PPointData ()
{
}

// PCellData
//

PCellData::
PCellData ()
: ::xml_schema::type (),
  PDataArray_ (::xml_schema::flags (), this)
{
}

PCellData::
PCellData (const PCellData& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PDataArray_ (x.PDataArray_, f, this)
{
}

PCellData::
PCellData (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PDataArray_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void PCellData::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PDataArray
    //
    if (n.name () == "PDataArray" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PDataArray_type > r (
        PDataArray_traits::create (i, f, this));

      this->PDataArray_.push_back (r);
      continue;
    }

    break;
  }
}

PCellData* PCellData::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PCellData (*this, f, c);
}

PCellData::
~PCellData ()
{
}

// PPoints
//

PPoints::
PPoints ()
: ::xml_schema::type (),
  PDataArray_ (::xml_schema::flags (), this)
{
}

PPoints::
PPoints (const PPoints& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PDataArray_ (x.PDataArray_, f, this)
{
}

PPoints::
PPoints (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PDataArray_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void PPoints::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PDataArray
    //
    if (n.name () == "PDataArray" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PDataArray_type > r (
        PDataArray_traits::create (i, f, this));

      this->PDataArray_.push_back (r);
      continue;
    }

    break;
  }
}

PPoints* PPoints::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PPoints (*this, f, c);
}

PPoints::
~PPoints ()
{
}

// PCells
//

PCells::
PCells ()
: ::xml_schema::type (),
  PDataArray_ (::xml_schema::flags (), this)
{
}

PCells::
PCells (const PCells& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PDataArray_ (x.PDataArray_, f, this)
{
}

PCells::
PCells (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PDataArray_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void PCells::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PDataArray
    //
    if (n.name () == "PDataArray" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PDataArray_type > r (
        PDataArray_traits::create (i, f, this));

      this->PDataArray_.push_back (r);
      continue;
    }

    break;
  }
}

PCells* PCells::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PCells (*this, f, c);
}

PCells::
~PCells ()
{
}

// Piece
//

Piece::
Piece (const Source_type& Source)
: ::xml_schema::type (),
  Source_ (Source, ::xml_schema::flags (), this)
{
}

Piece::
Piece (const Piece& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Source_ (x.Source_, f, this)
{
}

Piece::
Piece (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Source_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void Piece::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Source" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Source_type > r (
        Source_traits::create (i, f, this));

      this->Source_.set (r);
      continue;
    }
  }

  if (!Source_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Source",
      "");
  }
}

Piece* Piece::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Piece (*this, f, c);
}

Piece::
~Piece ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::VTKFile_t >
VTKFile (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::VTKFile_t > r (
    ::VTKFile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::VTKFile_t > r (
    ::VTKFile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::VTKFile_t > r (
    ::VTKFile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::VTKFile (isrc, f, p);
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::VTKFile (isrc, h, f, p);
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::VTKFile (isrc, h, f, p);
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::VTKFile (isrc, f, p);
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::VTKFile (isrc, h, f, p);
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::VTKFile (isrc, h, f, p);
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::VTKFile_t > r (
    ::VTKFile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::VTKFile_t > r (
    ::VTKFile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::VTKFile_t > r (
    ::VTKFile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::VTKFile_t > r (
      ::VTKFile (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "VTKFile" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::VTKFile_t > r (
      ::xsd::cxx::tree::traits< ::VTKFile_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "VTKFile",
    "");
}

::std::auto_ptr< ::VTKFile_t >
VTKFile (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "VTKFile" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::VTKFile_t > r (
      ::xsd::cxx::tree::traits< ::VTKFile_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "VTKFile",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const PUnstructuredGrid_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // PPointData
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PPointData",
        e));

    s << i.PPointData ();
  }

  // PCellData
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PCellData",
        e));

    s << i.PCellData ();
  }

  // PPoints
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PPoints",
        e));

    s << i.PPoints ();
  }

  // PCells
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PCells",
        e));

    s << i.PCells ();
  }

  // Piece
  //
  for (PUnstructuredGrid_t::Piece_const_iterator
       b (i.Piece ().begin ()), n (i.Piece ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Piece",
        e));

    s << *b;
  }

  // GhostLevel
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "GhostLevel",
        e));

    a << i.GhostLevel ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const VTKFile_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // PUnstructuredGrid
  //
  if (i.PUnstructuredGrid ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PUnstructuredGrid",
        e));

    s << *i.PUnstructuredGrid ();
  }

  // UnstructuredGrid
  //
  if (i.UnstructuredGrid ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "UnstructuredGrid",
        e));

    s << *i.UnstructuredGrid ();
  }

  // type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << i.type ();
  }

  // version
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "version",
        e));

    a << i.version ();
  }

  // byte_order
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "byte_order",
        e));

    a << i.byte_order ();
  }
}

void
VTKFile (::std::ostream& o,
         const ::VTKFile_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::VTKFile (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
VTKFile (::std::ostream& o,
         const ::VTKFile_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::VTKFile (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
VTKFile (::std::ostream& o,
         const ::VTKFile_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::VTKFile (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
VTKFile (::xercesc::XMLFormatTarget& t,
         const ::VTKFile_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::VTKFile (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
VTKFile (::xercesc::XMLFormatTarget& t,
         const ::VTKFile_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::VTKFile (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
VTKFile (::xercesc::XMLFormatTarget& t,
         const ::VTKFile_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::VTKFile (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
VTKFile (::xercesc::DOMDocument& d,
         const ::VTKFile_t& s,
         ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "VTKFile" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "VTKFile",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
VTKFile (const ::VTKFile_t& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "VTKFile",
      "",
      m, f));

  ::VTKFile (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const PPointData& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // PDataArray
  //
  for (PPointData::PDataArray_const_iterator
       b (i.PDataArray ().begin ()), n (i.PDataArray ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PDataArray",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const PCellData& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // PDataArray
  //
  for (PCellData::PDataArray_const_iterator
       b (i.PDataArray ().begin ()), n (i.PDataArray ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PDataArray",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const PPoints& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // PDataArray
  //
  for (PPoints::PDataArray_const_iterator
       b (i.PDataArray ().begin ()), n (i.PDataArray ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PDataArray",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const PCells& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // PDataArray
  //
  for (PCells::PDataArray_const_iterator
       b (i.PDataArray ().begin ()), n (i.PDataArray ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PDataArray",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const Piece& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // Source
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Source",
        e));

    a << i.Source ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

